@using TexasHoldemWeb.Components;
@using TexasHoldemWeb.Models;
@using Darkhood.TexasHoldem.Core;

<div class="table">
    <div class="board">
        @foreach (var card in _communityCards)
        {
            <PlayingCard Model="card"></PlayingCard>
        }
    </div>
    <div class="player-seats">
        @foreach (var player in Players)
        {
            <Seat PlayerModel="player" IsActive="_tournament.CurrentTurnPlayerId == player.PlayerId" />
        }
    </div>
</div>


<div class="player-action-bar">
    <RangeSlider OnChange="(sum) => SetBetSum(sum)" Min="@CurrentBet" Max="(int)UserPlayer.Chips"></RangeSlider>
    @if (IsUserTurn)
    {
        <button @onclick="CallClick" class="btn btn-primary">Call</button>
        <button @onclick="CheckClick" class="btn btn-primary">Check</button>
        <button @onclick="BetClick" class="btn btn-primary">Bet</button>
        <button @onclick="FoldClick" class="btn btn-primary">Fold</button>
    }
    <button @onclick="NextRoundClick" class="btn btn-primary">Next Round</button>
    <p>CurTurnPlayer: @CurrentTurnPlayerId</p>
    <p>CurBet: @CurrentBet</p>
</div>


@code { 
    protected override void OnInitialized()
    {
        _tournament.GameStateChanged += OnGameStateChanged;
        _tournament.OnPlayerAction += OnPlayerAction;

        Player p1 = new Player(1, "Player 1");
        Player p2 = new Player(2, "Player 2");
        Player p3 = new Player(3, "Player 3");

        _tournament.AddPlayer(p1);
        _tournament.AddPlayer(p2);
        _tournament.AddPlayer(p3);

        Players.Clear();
        foreach (var p in _tournament.Players)
        {
            Players.Add(new PlayerModel
            {
                PlayerId = p.PlayerId,
                Chips = p.Chips,
                IsDealer = p.IsDealer,
                IsBigBlind = p.IsBigBlind,
                IsSmallBlind = p.IsSmallBlind,
                PlayerName = p.PlayerName,
            });
        }
        Players[0].IsCurrentUser = true;

        _tournament.NextRound();
    }

    private void CallClick(MouseEventArgs e)
    {
        if (!IsUserTurn) return;
        _tournament.Call(UserPlayer.PlayerId);
        StateHasChanged();
    }


    private void CheckClick(MouseEventArgs e)
    {
        if (!IsUserTurn) return;
        _tournament.Check(UserPlayer.PlayerId);
        StateHasChanged();
    }


    private void BetClick(MouseEventArgs e)
    {
        if (!IsUserTurn) return;
        _tournament.Bet(UserPlayer.PlayerId, _betSum);
    }

    private void FoldClick(MouseEventArgs e)
    {
        if (!IsUserTurn) return;
        _tournament.Fold(UserPlayer.PlayerId);
    }

    private async void NextRoundClick(MouseEventArgs e)
    {
        _tournament.NextRound();
        await BotAction();
    }

    private void OnGameStateChanged(object sender, GameStateEventArgs e)
    {
        switch (State)
        {
            case GameState.PreFlop:
                _communityCards = new CardModel[5];
                break;
            case GameState.Flop:
                _communityCards[0] = new CardModel(_tournament.SharedCards[0]);
                _communityCards[1] = new CardModel(_tournament.SharedCards[1]);
                _communityCards[2] = new CardModel(_tournament.SharedCards[2]);
                _communityCards[0].IsFlipped = true;
                _communityCards[1].IsFlipped = true;
                _communityCards[2].IsFlipped = true;
                break;
            case GameState.Turn:
                _communityCards[3] = new CardModel(_tournament.SharedCards[3]);
                _communityCards[3].IsFlipped = true;
                break;
            case GameState.River:
                _communityCards[4] = new CardModel(_tournament.SharedCards[4]);
                _communityCards[4].IsFlipped = true;
                break;
            case GameState.Showdown:

                break;

        }
        UpdateGameView();
        StateHasChanged();
    }

    private async void OnPlayerAction(object sender, PlayerActionEventArgs e)
    {
        UpdateGameView();
        StateHasChanged();
        await BotAction();
    }

    private async Task BotAction()
    {
        // No humans allowed here
        if (IsUserTurn) return;
        if (_tournament.CanCall(_tournament.CurrentTurnPlayerId))
        {
            _tournament.Call(_tournament.CurrentTurnPlayerId);
            await Task.Delay(20);
        }
        else if (_tournament.CanCheck(_tournament.CurrentTurnPlayerId))
        {
            _tournament.Check(_tournament.CurrentTurnPlayerId);
            await Task.Delay(20);
        }
        else
        {
            _tournament.Raise(_tournament.CurrentTurnPlayerId, _tournament.CurrentBet);
        }
    }

    private void UpdateGameView()
    {
        // Update player info
        foreach (var player in Players)
        {
            var p = _tournament.GetPlayer(player.PlayerId);
            if (p != null)
            {
                bool revealCards = player.IsCurrentUser || State == GameState.Showdown;
                player.UpdateFrom(p, revealCards, revealCards);
            }
        }
    }

    private int _betSum = 0;
    private void SetBetSum(int sum)
    {
        this._betSum = sum;
    }

    private int CurrentTurnPlayerId => _tournament.CurrentTurnPlayerId;
    public PlayerModel UserPlayerModel => Players[0];
    public Player UserPlayer => _tournament.Players[0];
    public int CurrentBet => (int)_tournament.CurrentBet;
    public GameState State => _tournament.GameState;
    public bool IsUserTurn => _tournament.CurrentTurnPlayerId == UserPlayer.PlayerId;

    private Tournament _tournament = new Tournament();
    private CardModel[] _communityCards = new CardModel[5];
    public List<PlayerModel> Players = new List<PlayerModel>();
}
